---
import type { INavItem } from '@/interfaces/INavItem';
import type { SanityCategory } from '@/interfaces/SanityCategory';
import { getCategories } from '@/services/categorie/getCategories';

export interface Props {
  categoriesMenu?: SanityCategory[];
}

const { categoriesMenu } = Astro.props as Props;
const categories = await getCategories();

function createNavigation(categories: SanityCategory[]) {
  const roots = categories.filter((category) => !category.parent); // top-level categories
  const createNode = (category: SanityCategory): INavItem => {
    const children = categories.filter((c) => c.parent?._ref === category._id);
    if (children.length === 0) {
      const navItem: INavItem = {
        label: category.title,
        url: `/categorie/${category.slug.current}`,
      };
      return navItem;
    } else {
      const navItem = {
        label: category.title,
        children: children.map((child) => createNode(child)),
      };
      return navItem;
    }
  };

  return roots.map((root) => createNode(root));
}

function getCustomMenu(categories: SanityCategory[]) {
  return categories.map((category) => {
    const navItem: INavItem = {
      label: category.title,
      url: `/categorie/${category.slug.current}`,
    };
    return navItem;
  });
}

const navItems: INavItem[] = categoriesMenu
  ? getCustomMenu(categoriesMenu)
  : createNavigation(categories);
---

<nav>
  MENU
  <ul>
    {
      navItems.map((navItem) => (
        <li>
          <a href={`${navItem.url || '#'}`}>{navItem?.label}</a>
          {navItem.children && (
            <ul>
              {navItem.children.map((subNavItem) => (
                <li>
                  <a href={subNavItem.url}>{subNavItem.label}</a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
  FIN MENU
</nav>
